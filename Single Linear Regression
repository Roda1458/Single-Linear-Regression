{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN+WaxdeB3Er3G8tUcZ6OuG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"EbveVrtonaci","executionInfo":{"status":"ok","timestamp":1726481948543,"user_tz":420,"elapsed":1676,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"outputs":[],"source":[]},{"cell_type":"markdown","source":["Implement Linear Regression and calculate sum of residual error on the following\n","Datasets.\n","x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n","y = [1, 3, 2, 5, 7, 8, 8, 9, 10, 12]\n","ï‚· Compute the regression coefficients using analytic formulation and calculate Sum\n","Squared Error (SSE) and R^2 value."],"metadata":{"id":"8Nd-D8aJng1o"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Data\n","x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n","y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])"],"metadata":{"id":"enaHv7YhnpNF","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":7,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# Number of data points\n","n = len(x)\n"],"metadata":{"id":"Irj8GFUNn5MQ","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":6,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Adding a column of ones to the x data for the intercept term\n","X = np.vstack([np.ones(n), x]).T\n"],"metadata":{"id":"lmbGMNSZn_CF","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":6,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Compute coefficients using the analytic solution\n","# b = (X^T * X)^(-1) * X^T * y\n","b = np.linalg.inv(X.T @ X) @ X.T @ y\n","b0, b1 = b\n"],"metadata":{"id":"6VhHsNq5oChH","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":6,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Predictions\n","y_pred = b0 + b1 * x"],"metadata":{"id":"TFtoc7VjoIi9","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":6,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Calculate Sum Squared Error (SSE)\n","sse = np.sum((y - y_pred) ** 2)\n","\n","# Calculate Total Sum of Squares (SST)\n","ss_total = np.sum((y - np.mean(y)) ** 2)\n","\n","# Calculate R^2 value\n","r_squared = 1 - (sse / ss_total)\n"],"metadata":{"id":"SHEksvLnoMbn","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":5,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["print(f\"Analytic Solution: b0 = {b0:.4f}, b1 = {b1:.4f}\")\n","print(f\"SSE = {sse:.4f}\")\n","print(f\"R^2 = {r_squared:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i9WYZ8-WoSBM","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":5,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"9eb12454-3fe9-4213-c77b-c2f612b5893b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Analytic Solution: b0 = 1.2364, b1 = 1.1697\n","SSE = 5.6242\n","R^2 = 0.9525\n"]}]},{"cell_type":"markdown","source":["Implement gradient descent (both Full-batch and Stochastic with stopping\n","criteria) on Least Mean Square loss formulation to compute the coefficients of\n","regression matrix and compare the results using performance measures such as R 2\n","SSE etc."],"metadata":{"id":"FJVDxr9lpADO"}},{"cell_type":"markdown","source":["Gradient Descent Methods"],"metadata":{"id":"yVbMVDePpeFb"}},{"cell_type":"code","source":["import numpy as np\n","\n","def gradient_descent_full_batch(x, y, learning_rate=0.01, epochs=1000, tol=1e-6):\n","    # Initialize coefficients\n","    b0, b1 = 0.0, 0.0\n","    n = len(x)\n","\n","    for _ in range(epochs):\n","        # Predictions\n","        y_pred = b0 + b1 * x\n","\n","        # Compute gradients\n","        error = y_pred - y\n","        grad_b0 = (2 / n) * np.sum(error)\n","        grad_b1 = (2 / n) * np.sum(error * x)\n","\n","        # Update coefficients\n","        new_b0 = b0 - learning_rate * grad_b0\n","        new_b1 = b1 - learning_rate * grad_b1\n","\n","        # Check for convergence\n","        if np.abs(new_b0 - b0) < tol and np.abs(new_b1 - b1) < tol:\n","            break\n","\n","        b0, b1 = new_b0, new_b1\n","\n","    return b0, b1\n","\n","# Data\n","x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n","y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])\n","\n","# Run Full-Batch Gradient Descent\n","b0_gd, b1_gd = gradient_descent_full_batch(x, y)\n","y_pred_gd = b0_gd + b1_gd * x\n","\n","# Calculate SSE and R^2\n","sse_gd = np.sum((y - y_pred_gd) ** 2)\n","ss_total = np.sum((y - np.mean(y)) ** 2)\n","r_squared_gd = 1 - (sse_gd / ss_total)\n","\n","print(f\"Full-Batch GD: b0 = {b0_gd:.4f}, b1 = {b1_gd:.4f}\")\n","print(f\"SSE = {sse_gd:.4f}\")\n","print(f\"R^2 = {r_squared_gd:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RjvYzMQYsmSp","executionInfo":{"status":"ok","timestamp":1726481950073,"user_tz":420,"elapsed":4,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"619e12d4-538c-442b-e6ea-024ed282a404"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Full-Batch GD: b0 = 1.2328, b1 = 1.1703\n","SSE = 5.6243\n","R^2 = 0.9525\n"]}]},{"cell_type":"markdown","source":["Stochastic Gradient Descent"],"metadata":{"id":"fAFpmn9QtD42"}},{"cell_type":"code","source":["import numpy as np\n","\n","def gradient_descent_stochastic(x, y, learning_rate=0.01, epochs=1000, tol=1e-6):\n","    # Initialize coefficients\n","    b0, b1 = 0.0, 0.0\n","    n = len(x)\n","\n","    for _ in range(epochs):\n","        for i in range(n):\n","            xi, yi = x[i], y[i]\n","            # Prediction\n","            y_pred = b0 + b1 * xi\n","\n","            # Compute gradients\n","            error = y_pred - yi\n","            grad_b0 = 2 * error\n","            grad_b1 = 2 * error * xi\n","\n","            # Update coefficients\n","            b0 -= learning_rate * grad_b0\n","            b1 -= learning_rate * grad_b1\n","\n","        # Check for convergence (using the last update as an approximation)\n","        if np.abs(grad_b0) < tol and np.abs(grad_b1) < tol:\n","            break\n","\n","    return b0, b1\n","\n","# Run Stochastic Gradient Descent\n","b0_sgd, b1_sgd = gradient_descent_stochastic(x, y)\n","y_pred_sgd = b0_sgd + b1_sgd * x\n","\n","# Calculate SSE and R^2\n","sse_sgd = np.sum((y - y_pred_sgd) ** 2)\n","ss_total = np.sum((y - np.mean(y)) ** 2)\n","r_squared_sgd = 1 - (sse_sgd / ss_total)\n","\n","print(f\"Stochastic GD: b0 = {b0_sgd:.4f}, b1 = {b1_sgd:.4f}\")\n","print(f\"SSE = {sse_sgd:.4f}\")\n","print(f\"R^2 = {r_squared_sgd:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bq4-XMhjtE_M","executionInfo":{"status":"ok","timestamp":1726481950074,"user_tz":420,"elapsed":4,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"492767f5-bf4d-4e45-fc5a-a05a7bff524e"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Stochastic GD: b0 = 0.8967, b1 = 1.2987\n","SSE = 7.5762\n","R^2 = 0.9361\n"]}]},{"cell_type":"markdown","source":["Download Boston Housing Rate Dataset. Analyse the input attributes and find out the\n","attribute that best follow the linear relationship with the output price. Implement both the\n","analytic formulation and gradient descent (Full-batch, stochastic) on LMS loss\n","formulation to compute the coefficients of regression matrix and compare the results."],"metadata":{"id":"WLPKM7zdtfDT"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import zipfile\n","import os\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error, r2_score\n","import matplotlib.pyplot as plt\n","\n","# Step 1: Load and extract the dataset\n","zip_path = '/content/archive (1).zip'\n","extract_path = '/content/BostonHousing'\n","\n","with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","    zip_ref.extractall(extract_path)\n","\n","csv_path = os.path.join(extract_path, 'BostonHousing.csv')\n","df = pd.read_csv(csv_path)\n","\n","print(\"Dataset loaded successfully!\")\n","print(df.head())\n","print(df.info())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"auYDxoCc4iCR","executionInfo":{"status":"ok","timestamp":1726481954476,"user_tz":420,"elapsed":4405,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"2df2b42e-ed24-48c2-c408-0d2d7bf9255b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset loaded successfully!\n","      crim    zn  indus  chas    nox     rm   age     dis  rad  tax  ptratio  \\\n","0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n","1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n","2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n","3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n","4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n","\n","        b  lstat  medv  \n","0  396.90   4.98  24.0  \n","1  396.90   9.14  21.6  \n","2  392.83   4.03  34.7  \n","3  394.63   2.94  33.4  \n","4  396.90   5.33  36.2  \n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 506 entries, 0 to 505\n","Data columns (total 14 columns):\n"," #   Column   Non-Null Count  Dtype  \n","---  ------   --------------  -----  \n"," 0   crim     506 non-null    float64\n"," 1   zn       506 non-null    float64\n"," 2   indus    506 non-null    float64\n"," 3   chas     506 non-null    int64  \n"," 4   nox      506 non-null    float64\n"," 5   rm       501 non-null    float64\n"," 6   age      506 non-null    float64\n"," 7   dis      506 non-null    float64\n"," 8   rad      506 non-null    int64  \n"," 9   tax      506 non-null    int64  \n"," 10  ptratio  506 non-null    float64\n"," 11  b        506 non-null    float64\n"," 12  lstat    506 non-null    float64\n"," 13  medv     506 non-null    float64\n","dtypes: float64(11), int64(3)\n","memory usage: 55.5 KB\n","None\n"]}]},{"cell_type":"code","source":["# Step 2: Explore the dataset and find the best feature for linear relationship\n","target_col = 'medv'\n","if target_col not in df.columns:\n","    raise ValueError(f\"Target column '{target_col}' does not exist in the dataset.\")\n","\n","correlations = df.corr()\n","print(\"Feature correlations with the target:\")\n","print(correlations[target_col].sort_values(ascending=False))\n","\n","# Best feature based on correlation\n","best_feature = correlations[target_col].idxmax()\n","print(f\"The best feature based on correlation is: {best_feature}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fpxM7bmQ5A2L","executionInfo":{"status":"ok","timestamp":1726481954476,"user_tz":420,"elapsed":11,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"95710ece-53a2-4933-81cd-71906da0ad8f"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature correlations with the target:\n","medv       1.000000\n","rm         0.696169\n","zn         0.360445\n","b          0.333461\n","dis        0.249929\n","chas       0.175260\n","age       -0.376955\n","rad       -0.381626\n","crim      -0.388305\n","nox       -0.427321\n","tax       -0.468536\n","indus     -0.483725\n","ptratio   -0.507787\n","lstat     -0.737663\n","Name: medv, dtype: float64\n","The best feature based on correlation is: medv\n"]}]},{"cell_type":"code","source":["# Step 5: Gradient Descent (Full-Batch)\n","theta_gd = np.zeros(X_train_b.shape[1])\n","alpha = 0.01\n","epochs = 1000\n","\n","for epoch in range(epochs):\n","    gradients = 2 / len(X_train_b) * X_train_b.T @ (X_train_b @ theta_gd - y_train)\n","    theta_gd -= alpha * gradients\n","\n","y_pred_gd = X_test_b @ theta_gd\n","\n","# Calculate performance metrics for gradient descent\n","mse_gd = mean_squared_error(y_test, y_pred_gd)\n","r2_gd = r2_score(y_test, y_pred_gd)\n","\n","print(\"\\nGradient Descent Solution (Full-Batch):\")\n","print(f\"Theta (coefficients): {theta_gd}\")\n","print(f\"Mean Squared Error: {mse_gd}\")\n","print(f\"RÂ²: {r2_gd}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hlPtXsuJ6FZE","executionInfo":{"status":"ok","timestamp":1726481954476,"user_tz":420,"elapsed":8,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"4a63dab6-721d-498a-d45f-cc4bcc232776"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Gradient Descent Solution (Full-Batch):\n","Theta (coefficients): [22.11254122  8.94600825]\n","Mean Squared Error: 1.7750600168762494e-15\n","RÂ²: 1.0\n"]}]},{"cell_type":"code","source":["# Step 3: Prepare data for regression\n","X = df[[best_feature]]\n","y = df[target_col]\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)\n","\n","# Standardize the data\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Add intercept (bias) to X_train and X_test\n","X_train_b = np.c_[np.ones((X_train_scaled.shape[0], 1)), X_train_scaled]\n","X_test_b = np.c_[np.ones((X_test_scaled.shape[0], 1)), X_test_scaled]\n"],"metadata":{"id":"FIMuj1yc5vY1","executionInfo":{"status":"ok","timestamp":1726481954476,"user_tz":420,"elapsed":10,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Step 4: Analytical Solution (Normal Equation)\n","theta_analytic = np.linalg.inv(X_train_b.T @ X_train_b) @ X_train_b.T @ y_train\n","y_pred_analytic = X_test_b @ theta_analytic\n","\n","# Calculate performance metrics for the analytical solution\n","mse_analytic = mean_squared_error(y_test, y_pred_analytic)\n","r2_analytic = r2_score(y_test, y_pred_analytic)\n","\n","print(\"\\nAnalytic Solution:\")\n","print(f\"Theta (coefficients): {theta_analytic}\")\n","print(f\"Mean Squared Error: {mse_analytic}\")\n","print(f\"RÂ²: {r2_analytic}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-I4QLETh5_S7","executionInfo":{"status":"ok","timestamp":1726481954476,"user_tz":420,"elapsed":10,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"e3c9bda2-2f5b-4abf-b42d-4f34aebdcf7b"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Analytic Solution:\n","Theta (coefficients): [22.11254125  8.94600826]\n","Mean Squared Error: 1.253628216868465e-29\n","RÂ²: 1.0\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Check lengths of arrays\n","print(f\"Length of y_test: {len(y_test)}\")\n","print(f\"Length of y_pred_analytic: {len(y_pred_analytic)}\")\n","print(f\"Length of y_pred_gd: {len(y_pred_gd)}\")\n","print(f\"Length of y_pred_sgd: {len(y_pred_sgd)}\")\n","\n","# Initialize plot\n","plt.figure(figsize=(10, 6))\n","\n","# Scatter plot for Analytic predictions\n","if len(y_test) == len(y_pred_analytic):\n","    plt.scatter(y_test, y_pred_analytic, label='Analytic', alpha=0.5)\n","\n","# Scatter plot for Gradient Descent predictions\n","if len(y_test) == len(y_pred_gd):\n","    plt.scatter(y_test, y_pred_gd, label='Gradient Descent', alpha=0.5)\n","\n","# Scatter plot for Stochastic Gradient Descent predictions\n","if len(y_test) == len(y_pred_sgd):\n","    plt.scatter(y_test, y_pred_sgd, label='Stochastic Gradient Descent', alpha=0.5)\n","\n","# Plot the ideal line\n","plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='black', lw=2)\n","\n","# Add labels and title\n","plt.xlabel('Actual Prices')\n","plt.ylabel('Predicted Prices')\n","plt.legend()\n","plt.title('Comparison of Predicted Prices vs Actual Prices')\n","\n","# Show plot\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"LzwwGVcv6MF-","executionInfo":{"status":"ok","timestamp":1726482705368,"user_tz":420,"elapsed":1429,"user":{"displayName":"roda chinthapalli | AP22110011496","userId":"08680528684513607404"}},"outputId":"8e6d5fce-1f2d-490b-c0d7-e93f6b91f806"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Length of y_test: 203\n","Length of y_pred_analytic: 203\n","Length of y_pred_gd: 203\n","Length of y_pred_sgd: 10\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}